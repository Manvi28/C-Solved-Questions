Problem statement
You're given a string 'S' consisting of "{", "}", "(", ")", "[" and "]" .



Return true if the given string 'S' is balanced, else return false.



For example:
'S' = "{}()".

There is always an opening brace before a closing brace i.e. '{' before '}', '(' before ').
So the 'S' is Balanced.

Solution:
bool isValidParenthesis(string s)
{
    // Write your code here.
    stack<char>a;
    for(int i=0;i<s.length();i++){
        char ch=s[i];
        if(ch=='('||ch=='{'||ch=='['){
            a.push(ch);
        }
        else{
            if (!a.empty()) {
              char top = a.top();
              if ((ch == ')' && top == '(') || (ch == ']' && top == '[') ||
                  (ch == '}'&&top=='{')){
                      a.pop();
                  }
                  else{
                      return false;
                  }
            }
            else{
                return false;
            }
        }
    }
    if(a.empty()){
        return true;
    }
    else{
        return false;
    }
}
